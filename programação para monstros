using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GhostController : MonoBehaviour
{
    public GameObject Player;
    public float Speed;
    private Vector3 direction;

    public float damage = 10f; // Dano que o inimigo causará
    public float attackRange = 1.5f; // Distância de ataque
    public float attackCooldown = 1f; // Tempo entre ataques
    private float lastAttackTime;


    // Start is called before the first frame update
    void Start()
    {
        Player = GameObject.FindWithTag("Player");
    }

    // Update is called once per frame
    void Update()
    {
        direction = Player.transform.position - transform.position;

        Quaternion newRotation = Quaternion.LookRotation(direction);
        GetComponent<Rigidbody>().MoveRotation(newRotation);

        Vector3 moveDirection = Player.transform.position - transform.position;
        GetComponent<Rigidbody>().MovePosition(GetComponent<Rigidbody>().position + (moveDirection.normalized * Speed * Time.deltaTime));
    }

    private void update()
    {
        // Verifique se o player está dentro do alcance do ataque
        if (IsPlayerInRange() && Time.time > lastAttackTime + attackCooldown)
        {
            Attack();
        }
    }

    private bool IsPlayerInRange()
    {
        // Aqui você deve implementar a lógica para verificar a distância do jogador
        // Exemplo simples, considerando que o Player está na posição (0, 0, 0)
        GameObject player = GameObject.FindWithTag("Player");
        if (player != null)
        {
            float distance = Vector3.Distance(transform.position, player.transform.position);
            return distance <= attackRange;
        }
        return false;
    }

    private void Attack()
    {
        GameObject player = GameObject.FindWithTag("Player");
        if (player != null)
        {
            PlayerControl playerControl = player.GetComponent<PlayerControl>();
            if (playerControl != null)
            {
                playerControl.TakeDamage(damage);
                lastAttackTime = Time.time;
            }
        }
    }
}
